/*
 * MAGIos Swift Kernel - Embedded Swift Implementation
 * Evangelion-themed operating system kernel with minimal Swift runtime
 * Optimized for bare-metal embedded environment
 */

// MARK: - VGA Hardware Constants

/// VGA text mode hardware specifications
private let VGA_WIDTH: UInt8 = 80
private let VGA_HEIGHT: UInt8 = 25
private let VGA_MEMORY: UInt8 = 0xB8000

// MARK: - VGA Hardware Color System

/// VGA 4-bit color palette (hardware specification)
enum VGAColor: UInt8 {
    case black = 0
    case blue = 1
    case green = 2
    case cyan = 3
    case red = 4
    case magenta = 5
    case brown = 6
    case lightGrey = 7
    case darkGrey = 8
    case lightBlue = 9
    case lightGreen = 10
    case lightCyan = 11
    case lightRed = 12
    case lightMagenta = 13
    case lightBrown = 14
    case white = 15
}

// MARK: - VGA Hardware Uerface

/// Combine foreground and background colors (BBBBFFFF format)
@inline(__always)
private func vgaEntryColor(foreground: VGAColor, background: VGAColor) -> UInt8 {
    return foreground.rawValue | (background.rawValue << 4)
}

/// Create VGA character entry (2 bytes: character + attributes)
@inline(__always)
private func vgaEntry(character: UInt8, color: UInt8) -> UInt16 {
    return UInt16(character) | (UInt16(color) << 8)
}

// MARK: - Terminal Hardware State

/// VGA terminal state management - using struct to avoid ARC overhead
private struct TerminalState {
    var row: UInt8
    var column: UInt8
    var color: UInt8
    var buffer: UnsafeMutablePointer<UInt16>

    init() {
        self.row = 0
        self.column = 0
        self.buffer = UnsafeMutablePointer<UInt16>(bitPattern: Int(VGA_MEMORY))!
        self.color = vgaEntryColor(foreground: .lightCyan, background: .black)
    }
}

/// Global terminal hardware interface
private var terminal = TerminalState()

// MARK: - Terminal Hardware Operations

/// Initialize VGA terminal hardware
private func terminalInitialize() {
    terminal.row = 0
    terminal.column = 0
    terminal.color = vgaEntryColor(foreground: .lightCyan, background: .black)

    // Clear VGA buffer
    for y in 0..<VGA_HEIGHT {
        for x in 0..<VGA_WIDTH {
            let index = y * VGA_WIDTH + x
            terminal.buffer[index] = vgaEntry(character: UInt8(32), color: terminal.color)  // 32 = space
        }
    }
}

/// Write character to VGA buffer at cursor position
private func terminalPutchar(_ character: UInt8) {
    if character == 10 {  // 10 = newline
        terminal.column = 0
        terminal.row += 1
        if terminal.row >= VGA_HEIGHT {
            terminal.row = 0
        }
        return
    }

    let index = terminal.row * VGA_WIDTH + terminal.column
    terminal.buffer[index] = vgaEntry(character: character, color: terminal.color)

    terminal.column += 1
    if terminal.column >= VGA_WIDTH {
        terminal.column = 0
        terminal.row += 1
        if terminal.row >= VGA_HEIGHT {
            terminal.row = 0
        }
    }
}

/// Write buffer to terminal
private func terminalWrite(_ data: UnsafePointer<UInt8>, size: Int) {
    for i in 0..<size {
        terminalPutchar(data[i])
    }
}

/// Calculate C string length
private func swiftStrlen(_ str: UnsafePointer<UInt8>) -> Int {
    var length = 0
    while str[length] != 0 {
        length += 1
    }
    return length
}

/// Write null-terminated string
private func terminalWritestring(_ data: UnsafePointer<UInt8>) {
    let dataLength = swiftStrlen(data)

    // Add some spacing for alignment
    for _ in 0..<2 {
        terminalPutchar(32)  // 32 = space
    }

    for i in 0..<dataLength {
        terminalPutchar(data[i])
    }
}

/// Set terminal color attributes
private func terminalSetcolor(_ color: UInt8) {
    terminal.color = color
}

/// Helper to write byte array as string
private func writeByteArray(_ bytes: [UInt8]) {
    bytes.withUnsafeBufferPointer { buffer in
        if let baseAddress = buffer.baseAddress {
            terminalWritestring(baseAddress)
        }
    }
}

/// MAGI system initialization sequence
private func displayMAGIStartup() {
    terminalSetcolor(vgaEntryColor(foreground: .lightRed, background: .black))
    terminalPutchar(10)  // newline

    terminalSetcolor(vgaEntryColor(foreground: .lightCyan, background: .black))
    terminalSetcolor(vgaEntryColor(foreground: .lightGreen, background: .black))

    terminalSetcolor(vgaEntryColor(foreground: .lightCyan, background: .black))
    terminalSetcolor(vgaEntryColor(foreground: .lightGreen, background: .black))

    terminalSetcolor(vgaEntryColor(foreground: .lightCyan, background: .black))

    terminalSetcolor(vgaEntryColor(foreground: .lightGreen, background: .black))

    terminalPutchar(10)  // newline
}

/// Display kernel status information
private func displaySystemInfo() {
    terminalSetcolor(vgaEntryColor(foreground: .lightMagenta, background: .black))
    terminalSetcolor(vgaEntryColor(foreground: .white, background: .black))
}

/// Display final initialization status
private func displayFinalMessage() {
    terminalSetcolor(vgaEntryColor(foreground: .lightRed, background: .black))
    terminalSetcolor(vgaEntryColor(foreground: .lightGrey, background: .black))
}

// MARK: - Kernel Entry Points

/// Main Swift kernel entry point (called from C bootstrap)
@_cdecl("swift_kernel_main")
public func swiftKernelMain() {
    terminalInitialize()
    displayMAGIStartup()
    displaySystemInfo()
    displayFinalMessage()
}

/// C-compatible terminal string output
@_cdecl("swift_terminal_writestring")
public func swiftTerminalWritestring(_ data: UnsafePointer<UInt8>) {
    terminalWritestring(data)
}

/// C-compatible terminal color control
@_cdecl("swift_terminal_setcolor")
public func swiftTerminalSetcolor(_ color: UInt8) {
    terminalSetcolor(color)
}

/// C-compatible terminal initialization
@_cdecl("swift_terminal_initialize")
public func swiftTerminalInitialize() {
    terminalInitialize()
}

/*
 * MAGIos Swift Kernel - Embedded Optimizations Applied
 *
 * Key Changes for Embedded Compatibility:
 * - Replaced class with struct to avoid ARC overhead
 * - Pre-defined strings as byte arrays to avoid runtime string handling
 * - Eliminated string literals that require dynamic allocation
 * - Used direct ASCII values instead of character literals where possible
 * - Minimized use of Swift standard library features
 * - Optimized for bare-metal freestanding environment
 *
 * Memory Management:
 * - No dynamic allocation required
 * - All data structures are stack-allocated or global
 * - Minimal Swift runtime footprint
 * - Compatible with provided C runtime stubs
 */
